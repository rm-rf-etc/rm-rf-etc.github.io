{
  "name": "Rob Christian",
  "tagline": "I'm a programmer. Here's some stuff I've made.",
  "body": "# WIP\r\n\r\n## Concise: Experimental FE Framework\r\n\r\nPrior to learning React, I started this experiment to test out some ideas I had around data binding and view rendering. I first created connected.js, a library that creates bindable JS Objects and Arrays, and triggers updates using events. This seemed successful, and next I wanted to use it in view rendering. I contemplated using Handlebars, but I had become frustrated at work after an external team had mangled our Handlebars templates and created unnecessary cleanup work. I came up with the idea of representing markup using JS objects. This improves developer experience by enforcing valid DOM structure at all times (no exceptions).\r\n```\r\n{\r\n    body: {\r\n        h1: 'Page Title',\r\n        div: {\r\n            p1: 'Lorem ipsum',\r\n            p2: 'delor sit amit'\r\n        },\r\n        button: function() {\r\n            this.onClick(function() {\r\n                alert('Click event!')\r\n            })\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThe result was concise.js. Below shows a working To-Do app using concise.js.\r\n\r\n`app example goes here`\r\n\r\n\r\n## Encore: A Node MVC\r\n\r\nBack when I was getting interested in node.js, I was frustrated by a seeming lack of structure in express projects. I preferred MVC at the time, so I started toying with ways to make a node app structured more like my favorite MVC's.\r\n\r\nFirst I made a router (I didn't care for the routers I found on github). Express will test all routes in order, which isn't optimal. Runway.js instead tests each segment in order, and supports arbitrary RegEx patterns. Internally, runway uses standard tools from lodash to build a tree by creating each branch and then merging it into the tree.\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}